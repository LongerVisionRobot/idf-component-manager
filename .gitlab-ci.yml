cache:
  paths:
    - .tox
  key: "$CI_JOB_NAME-cache-2"

stages:
  - check
  - test
  - deploy

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"
      when: never
    - if: "$CI_COMMIT_BRANCH"

.check:
  image: python:3.10-bullseye
  stage: check
  tags:
    - lint
    - internet

lint:
  extends: .check
  artifacts:
    when: on_failure
    paths:
      - flake8_output.txt
      - bandit_output.txt
    expire_in: 1 week
  before_script:
    - pip install bandit flake8
  script:
    # disable B101: test for use of assert
    - bandit --exclude="./tests,./integration_tests,./.tox,./.git" -r -f txt -s B101 -o bandit_output.txt .
    - flake8 --config=.flake8 --output-file=flake8_output.txt --tee

check_changelog:
  extends: .check
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  script:
    - |
      (git diff-tree --name-only --no-commit-id "origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}" "${CI_COMMIT_SHA}" | grep "CHANGELOG.md") || \
        [[ "${CI_MERGE_REQUEST_LABELS}" =~ ^(.*,)*no_changelog(,.*)*$ ]] || \
        (echo "Please either update CHANGELOG.md file or add 'no_chagelog' label" && exit 1)

.test_template:
  stage: test
  tags:
    - test
    - internet
  before_script:
    - pip install tox
  artifacts:
    reports:
      cobertura: coverage.xml

test:py2.7:
  extends: .test_template
  image: python:2.7-buster
  script:
    - tox -e py27

test:py3.5:
  extends: .test_template
  image: python:3.5-buster
  script:
    - tox -e py35

test:py3.9:
  extends: .test_template
  image: python:3.9-buster
  script:
    - tox -e py39

.integration_test_template:
  stage: test
  tags:
    - test
    - internet
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^release\/v/'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$RUN_INTEGRATION_TESTS == "true"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - integration_tests/**/*
  artifacts:
    reports:
      cobertura: coverage_integration.xml
  before_script:
    - apt-get update && apt-get install -y -q libusb-1.0 cmake git ninja-build
    - git clone https://github.com/espressif/esp-idf.git
    - cd ./esp-idf/
    - git checkout ${IDF_BRANCH:-master}
    - ./install.sh
    - . ./export.sh
    - git submodule update --init --recursive
    - cd ..
    - pip install $CI_PROJECT_DIR pytest pytest-cov "jinja2<3.1"
  script:
    - py.test -s -c pytest_integration.ini --cov=. --cov-report=xml:coverage_integration.xml --log-cli-level=INFO

integration_test:py2.7:
  extends: .integration_test_template
  image: python:2.7-slim-buster
  parallel:
    matrix:
      - IDF_BRANCH: [release/v4.1, release/v4.2]

integration_test:py3.5:
  extends: .integration_test_template
  image: python:3.5-slim-buster
  parallel:
    matrix:
      - IDF_BRANCH: [release/v4.1, release/v4.2, release/v4.3]

integration_test:py3.6:
  extends: .integration_test_template
  image: python:3.6-slim-buster
  parallel:
    matrix:
      - IDF_BRANCH: [release/v4.4]

integration_test:py3.7:
  extends: .integration_test_template
  image: python:3.7-slim-buster
  parallel:
    matrix:
      - IDF_BRANCH: [master]

publish_on_pypi:
  image: python:3.9-slim-buster
  stage: deploy
  tags:
    - internet
  variables:
    TWINE_NON_INTERACTIVE: "true"
    TWINE_USERNAME: __token__
    TWINE_PASSWORD: ${PYPI_TOKEN}
  before_script:
    - apt update && apt install curl jq -y
    - pip install twine
  script:
    - ./publish.sh
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
